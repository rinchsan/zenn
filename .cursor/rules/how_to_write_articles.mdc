---
description: 
globs: 
alwaysApply: true
---
# Zenn記事執筆用Cursor Rules

Zennへの記事投稿を一貫したスタイルで効率的に行うための設定です。これらのルールは林さんのブログスタイルを再現し、Agentモードでの執筆をサポートします。

## 1. フロントマターテンプレート

```
RULE: 新しい記事を作成する際は、常に以下のYAMLフロントマターテンプレートを使用する。

---
title: "{タイトルを入力}"
emoji: "🏂"
type: "{article_type}" # tech: 技術記事 / idea: アイデア
topics: ["{トピック1}", "{トピック2}"]
published: true
publication_name: "team_soda"
---

※ article_typeは「tech」または「idea」を選択。技術的な内容は「tech」、体験談や考えは「idea」を使用。
※ emojiはデフォルトで「🏂」を使用するが、記事内容に合わせて変更も可能。
※ 記事内容に合わせて適切なトピックタグを2-4個付与する。
※ トピックはZenn上に実際に存在するものを選択する必要がある。トピックが存在するかは https://zenn.dev/topics/{トピック名} のURLにアクセスして確認する。ステータスコード200が返れば存在し、404が返れば存在しないので使用できない。例えば「aws」は使用可能だが、「zzzzz」は使用不可。
```

## 2. 記事構造のルール

```
RULE: 以下の記事構造に従う。

1. 導入部（コンテキスト設定）
   - Advent Calendarの一部である場合は「＼[スニダン](mdc:https:/snkrdunk.com)を開発しているSODA inc.の [Advent Calendar {年}](mdc:https:/qiita.com/advent-calendar/{年}/soda-inc) {日}日目の記事です!!!／」のような導入を入れる

2. 見出しレベル
   - 大見出しは ## (h2) を使用
   - 小見出しは ### (h3) を使用
   - 必要に応じて #### (h4) も使用可能

3. 図表やコード
   - コードブロックは言語指定を必ず行う（例: ```go）
   - 画像は `![](URL)` 形式で挿入
   - 画像キャプションは画像の直後に *斜体* で記述

4. リンク
   - 外部リンクは URL を独立した行に配置
   - GitHub リポジトリへのリンクは頻繁に使用

5. リスト
   - 箇条書きには `-` を使用
   - 番号付きリストには `1.` を使用

6. 結論
   - 技術記事の場合は学びや応用方法をまとめる
   - 体験談の場合は感想や今後の展望を記述
```

## 3. 文体と表現のルール

```
RULE: 以下の文体と表現スタイルを使用。

1. 基本は「です・ます調」の丁寧語を使うが、カジュアルさも残す
   - 「〜です。」「〜ました。」を基本とする
   - カジュアルさを出すために「〜だったりします」「〜なんですが」などの表現も適宜使用

2. 一人称は「僕」を使用

3. 表現の特徴
   - 感情表現を含める（「嬉しいです」「楽しかったです」など）
   - 軽いユーモアや自虐を含める（例: 「...なのもまた思い出・・・」「...したら失敗しました()」）
   - 経験から得た学びを率直に共有する

4. 句読点
   - 読点「、」は適宜使用してリズム感を出す
   - 文末には「。」を使用

5. 強調表現
   - 重要なポイントは **太字** で強調
   - 補足情報は（）で括る
   - 「〜」や「・・・」などの表現を活用して余韻を残す

6. 絵文字・記号
   - 絵文字は適度に使用（:tada: など）
   - 「！」は重要なポイントや嬉しいことに使用
```

## 4. 技術記事特有のルール

```
RULE: 技術記事を書く際の追加ルール。

1. コード例は実際に動作するものを提供
   - コメントを適切に入れる
   - 重要な箇所には説明を付ける

2. 技術的なステップは順を追って説明
   - コマンドラインの例は ```bash または ```shell でコードブロックに
   - 設定ファイルの例は ```yaml, ```json などで言語を明示

3. 難しい概念は例えや図で説明
   - 概念図は必要に応じて挿入
   - 例えは身近なものを使用

4. 失敗例やハマりポイントも共有
   - 自分が躓いた点を正直に共有
   - 解決方法も必ず提示

5. ツールやライブラリの紹介時
   - GitHub リポジトリへのリンクを必ず含める
   - インストール方法や基本的な使い方を記載
   - 便利な点を具体的に列挙
```

## 5. コマンドライン操作のためのガイド

```
RULE: Zenn CLI を使った記事管理の方法。

1. 新規記事作成（Makefileコマンド）
   - 新規記事作成: `make new`
     - 現在のMakefileでは、デフォルトで技術記事（type=tech）として作成される
     - このコマンドは自動的に現在日時をslugに設定
   - アイデア記事を作りたい場合は、作成後にフロントマターの「type」を手動で「idea」に変更する

2. プレビュー
   - `make preview` でローカルでのプレビューを開始

3. 記事更新
   - 既存記事は直接Markdownファイルを編集

4. 画像管理
   - 記事IDに対応するディレクトリを images/ に作成
   - 記事から相対パスで参照（例: `/images/{記事ID}/image.png`）

5. Zenn CLIアップデート
   - `make upgrade` で最新版に更新
```

## 6. 記事執筆時のチェックリスト

```
RULE: 記事執筆完了前に以下の項目をチェック。

1. フロントマター
   - title: 適切なタイトルが設定されているか
   - emoji: 適切な絵文字が設定されているか
   - type: 内容に合わせた適切なタイプが設定されているか
   - topics: 内容に合った適切なトピックが設定されているか
     - 選択したトピックがZenn上に実際に存在するか https://zenn.dev/topics/{トピック名} にアクセスして確認
   - published: 公開設定が正しいか
   - publication_name: 必要に応じて設定されているか

2. 構造
   - 見出しレベルが適切か
   - コンテンツが論理的に構成されているか
   - 導入から結論まで流れが自然か

3. コンテンツ
   - コードブロックに言語指定があるか
   - リンクが正しく機能するか
   - 画像が適切に表示されるか
   - 誤字脱字はないか

4. スタイル
   - 文体は一貫しているか
   - 技術的な正確さは担保されているか
   - カジュアルさと専門性のバランスは適切か

5. 最終確認
   - ローカルでプレビューして表示を確認したか
   - 全体の長さは適切か（読み切れる長さか）
```
